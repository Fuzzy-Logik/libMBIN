using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using libMBIN.Models;

namespace libMBIN {
    public class MBINFile : IDisposable {
        public MBINHeader Header;
        private readonly IO _io;
        private readonly string _filePath;
        private readonly bool _keepOpen;

        public MBINFile( string path = null, IO io = null, bool keepOpen = false ) {
            _filePath = path;
            _io = io;
            _keepOpen = keepOpen;
        }

        public MBINFile( string path )
            : this( path, new IO( path, FileMode.OpenOrCreate ), false ) { }

        public MBINFile( Stream stream, bool keepOpen = false )
            : this("/DEV/NULL", new IO(stream), keepOpen) { }

        public MBINFile Initialize(Type type = null) {
            Header = new MBINHeader().Initialize(type);
            return this;
        }

        //public bool Load(bool getVersion = false)
        public bool Load() {
            _io.Stream.Position = 0;
            Header = (MBINHeader) NMSTemplate.DeserializeBinaryTemplate( _io.Reader, "MBINHeader" );
            //if (getVersion)
            //{
            //    string mbinVer = Header.GetMBINVersion();
            //    Console.WriteLine(mbinVer.Substring(8));
            //}
            /*else
            {
                if (Header.Tag == 0x726576434E49424D)        // check whether the file has been generated by MBINCompiler basically
                {
                    string ver = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString();
                    if (Header.Tag != String.Format("MBINCver{0}", ver.Substring(0, ver.Length - 2)))
                    {
                        Console.WriteLine("Incorrect version");
                        return false;
                    }
                }
            }*/
            return true;
        }

        public bool Save() {
            _io.Stream.Position = 0;
            _io.Writer.Write( Header.SerializeBytes() );
            _io.Writer.Flush();

            return true;
        }

        public NMSTemplate GetData() {
            _io.Stream.Position = MBINHeader.SIZE;
            return NMSTemplate.DeserializeBinaryTemplate( _io.Reader, Header.GetXMLTemplateName() );
        }

        public void SetData( NMSTemplate template ) {
            _io.Stream.SetLength( MBINHeader.SIZE ); // TODO: redundant?
            _io.Stream.Position = MBINHeader.SIZE;

            _io.Writer.Write( template.SerializeBytes() );
            Header.TemplateName = "c" + template.GetType().Name;
        }

        public void Dispose() {
            if (_io != null && _keepOpen == false) {
                _io.Dispose();
            }
        }
    }
}